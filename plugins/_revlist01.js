let handler = async (m, { text, conn }) => {
  if (!m.isGroup) return m.reply('‚ö†Ô∏è Este comando solo funciona en grupos.');
  if (!text) return m.reply(`‚ö†Ô∏è Uso correcto:\n.revlist1 <emoji>\n\nEjemplo:\n.revlist1 üçè`);

  let emoji = text.trim().split(/ +/)[0];

  const metadata = await conn.groupMetadata(m.chat);
  const groupName = metadata.subject;

  let admins = metadata.participants.filter(p => p.admin || p.isAdmin || p.isSuperAdmin);
  let members = metadata.participants.filter(p => !p.admin && !p.isAdmin && !p.isSuperAdmin);

  if (members.length > 100) members = members.slice(0, 100);

  const notUpToDateCount = 10; // Primeros 10 miembros no al d√≠a
  const membersStatus = members.map((p, i) => ({
    id: p.id,
    upToDate: i >= notUpToDateCount
  }));

  let lista = '';
  membersStatus.forEach((p, i) => {
    let userTag = '@' + p.id.split('@')[0];
    let num = i + 1;
    let emojiLine = p.upToDate ? `${emoji}${emoji}${emoji}${emoji}${emoji}` : '';
    lista += `${emoji}${num}. ${userTag}\n‚ï†   .‚ìÅ .‚ìú.‚ìú.‚ìô. ‚ì•\nüá™ .${emojiLine}\n`;
  });

  let adminList = admins.map(p => `${emoji} @${p.id.split('@')[0]}`).join('\n');

  let finalMessage = `·¥Ä ü ·¥Ö√≠·¥Ä ${emoji}:\n…¥·¥è ·¥Ä ü ·¥Ö√≠·¥Ä ‚ùå:\n·¥á…¥·¥õ Ä·¥á…¢·¥Ä ·¥õ·¥Ä Ä·¥Ö·¥á ‚è±Ô∏è:\n…¥·¥ú·¥á·¥†·¥è &  Ä·¥á…™…¥…¢ Ä·¥áÍú±·¥è üÜï:\n·¥ò·¥á Ä·¥ç…™Íú±·¥è üÖøÔ∏è:\n\n${emoji}${emoji} ${groupName} ${emoji}${emoji}\n\n ü…™Íú±·¥õ·¥Ä ·¥Ö·¥á …™…¥·¥õ·¥á…¢ Ä·¥Ä…¥·¥õ·¥áÍú±\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${emoji}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n${lista}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${emoji}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\nTotal de integrantes: ${members.length}\n\n${emoji}__\n·¥Ä·¥Ö·¥ç…™Íú± ·¥á…¥·¥Ñ·¥Ä Ä…¢·¥Ä·¥Ö·¥èÍú±\n${adminList}`;

  await conn.sendMessage(m.chat, { text: finalMessage, mentions: [...members.map(p => p.id), ...admins.map(p => p.id)] }, { quoted: m });
};

handler.command = /^revlist1$/i;
handler.tags = ['herramientas'];
handler.help = ['revlist1 <emoji>'];

export default handler;